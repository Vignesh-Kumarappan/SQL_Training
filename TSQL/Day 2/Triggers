1. create a trigger which does not allow delete on emp on Tuesday and not delete president

   create trigger TriggerInsteadOfDelete on emp
   instead of delete
   as
      declare @empno int;
	  declare @job varchar(30);
	  select @job = d.job from deleted d;
	  declare @day int = datepart(WEEKDAY,getdate());
	  select @empno = d.empno from deleted d;
	  begin
	      
		  if(@day = 3)
		  raiserror('Record Cannot be deleted on tuesday ..',16,1)
		  
		  else if(@job = 'PRESIDENT')
		  raiserror('President cannot be deleted..',16,1)
		  
		  else
		  begin
		    delete from emp where empno =@empno;
			print 'Record deleted -- instead of delete trigger';
		   end	
	  end
   GO

   delete from emp where empno =7839

-------------------------------------------------------------------------------------------

2. create a trigger which doesnt allow sal update if current sal is more than proposed

   create trigger TriggerInsteadOfupdate_OnSalary on emp
   instead of update
   as
      declare @empno int;
	  declare @sal_old int;
	  declare @sal_new int;
	  select @empno = d.empno from deleted d;
	  select @sal_old = d.sal from deleted d;
	  select @sal_new = i.sal from inserted i;
	  begin
	      if(@sal_new < @sal_old)
		  raiserror('Salary can not be updated ..',16,1)
		  else
		  begin
		    update emp set sal = @sal_new where empno =@empno;
			print 'Record updated -- instead of update trigger';
		   end	
	  end
   GO

   update emp set sal = 100 where empno = 7839

-------------------------------------------------------------------------------------------------

3. After triggers for all DML operations

CREATE TRIGGER triggerAfterOnDMLOperations ON Employee_Test
FOR INSERT,DELETE,UPDATE
AS
	declare @empid int;
	declare @empname varchar(100);
	declare @empsal decimal(10,2);
	declare @audit_action varchar(100);
	declare @inscount int;
	declare @delcount int;

	select @insertcount= Count(*) from inserted i;
	select @deletedcount= Count(*) from deleted d;

	--Insert Condition
	if(@insertcount>0 and @deletedcount=0)
	BEGIN
	select @empid=i.Emp_ID from inserted i;
	select @empname=i.Emp_Name from inserted i;
	select @empsal=i.Emp_Sal from inserted i;
	set @audit_action='Inserted Record--
	After Insert Trigger.';
	insert into Employee_Test_Audit
	values(@empid,@empname,@empsal,@audit_action,getdate());
	PRINT 'After Insert Trigger fired.'
	END

	--Delete Condition
	if(@insertcount=0 and @deletedcount>0)
	BEGIN
	select @empid=i.Emp_ID from deleted i;
	select @empname=i.Emp_Name from deleted i;
	select @empsal=i.Emp_Sal from deleted i;
	set @audit_action='Deleted Record--
	After Delete Trigger.';
	insert into Employee_Test_Audit
	values(@empid,@empname,@empsal,@audit_action,getdate());
	PRINT 'After Delete Trigger fired.'
	END

	--Update Condition
	if(@insertcount>0 and @deletedcount>0)
	BEGIN
	select @empid=i.Emp_ID from deleted i;
	select @empname=i.Emp_Name from deleted i;
	select @empsal=i.Emp_Sal from deleted i;
	select @empid=i.Emp_ID from inserted i;
	select @empname=i.Emp_Name from inserted i;
	select @empsal=i.Emp_Sal from inserted i;
	set @audit_action='Updated Record--
	After Update Trigger.';
	insert into Employee_Test_Audit
	values(@empid,@empname,@empsal,@audit_action,getdate());
	PRINT 'After Update Trigger fired.'
	END
GO

----------
